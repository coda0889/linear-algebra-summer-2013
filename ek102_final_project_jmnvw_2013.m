%{ 
EK102: Final Project - [Title Here]

Group Members: 
Jacob Janco, Trent Merrell, Stan Ng, J. Vandame, Michael Webster
%}

% Main Function
function ek102_final_project_jmnvw_2013

% Global & Default Variables, Preallocation Block
global ROWS
global COLUMNS
global STEP
global DISP_MAT
global DISP_STEP_ARRAY
global INDEX
global RESHAPE_DISP
global INDEX_COUNT
global RED_CHECK_FWD
global RED_CHECK_BWD
global INFO_BOX_TEXT

ROWS = 3; 
COLUMNS = 3;
INDEX = 1;
INDEX_COUNT = 0;
STEP = COLUMNS * ROWS;
RED_CHECK_FWD = 0;
RED_CHECK_BWD = 0;

help_check = 1;
data_in = randi( 20, 3 );

info_text_initial = sprintf( [ 'Linear Algebra Learning Box\n\n'...
    'Contributors: Jacob Janco, Trent Merrell, Stan Ng, Juliette Vandame, Michael Webster\n\n'...
    'Instructions:\n'...
    '1. Enter values for rows and columns, then click <Set Rows and Columns>\n'...
    '2. Choose an operation from the drop down menu, then click <Execute Operation>\n'...
    '3. Click Forward and Backward to learn about the steps involved in the selected operation '...
    'if that option is available.\n\n',...
    'Any other information will appear here, thanks and enjoy!\n'...
    '\n' ] );

INFO_BOX_TEXT = info_text_initial;

% GUI ELEMENT BLOCK
f = figure;
set( f,...
    'Visible', 'off',...
    'MenuBar', 'none',...
    'Units', 'Pixels',...
    'NumberTitle','off',...
    'Name','EK 102 Final Project',...
    'Position', [ 0 0 1000 500 ],...
    'Color', [ 0.8 0.8 0.8 ],...
    'InvertHardCopy', 'off' );
% Title box
title_box = uicontrol(...
    'Style', 'text',...
    'String', 'Linear Algebra Learning Box',...
    'FontWeight', 'bold',...
    'FontSize', 15,...
    'ForegroundColor', [ 0.0 0.0 0.0 ],...
    'BackgroundColor', [ 0.9 0.9 0.9 ],...
    'Position', [ 685, 455, 300, 30 ] );

% Help button
help_button = uicontrol(...
    'Style', 'pushbutton',...
    'String' , 'Help',...
    'Position', [ 945, 5, 50, 15 ],...
    'BackgroundColor', [ 0.7 0.7 0.7 ],...
    'CallBack', @cb_help_button );
  
% Row and Column editable boxes and set button
row_box = uicontrol(...
    'Style', 'edit',...
    'String', 'Rows',...
    'Position', [ 700, 400, 75, 30 ] );

col_box = uicontrol(...
    'Style', 'edit',...
    'String', 'Columns',...
    'Position', [ 800, 400, 75, 30 ] );

rxc_button = uicontrol(...
    'Style', 'pushbutton',...
    'String' , 'Set Rows and Columns',...
    'Position', [ 700, 350, 125, 25 ],...
    'CallBack', @cb_rxc_button );

% Title boxes for input and output matrix
entry_table_text = uicontrol(...
    'Style', 'text',...
    'String', 'Input Matrix: Enter Data Here',...
    'Position', [ 50, 460, 300, 25 ] );

output_table_text = uicontrol(...
    'Style', 'text',...
    'String', 'Output Matrix: Result of Executed Operation',...
    'Position', [ 375, 460, 300, 25 ] );

% Main entry and output table 
entry_table = uitable(...
    'Data', data_in,...
    'Position', [ 50, 250, 300, 200 ],...
    'ColumnWidth', {50},...
    'ColumnEditable', [ true true true ] );

output_table = uitable(...
    'Data', data_in,...
    'Position', [ 375, 250 300, 200 ],...
    'ColumnWidth', {50} );
   
% Static textbox with information about the operations
info_box = uicontrol(...
    'Style', 'edit',...
    'Enable', 'inactive',...
    'String', info_text_initial,...
    'Max', 2,...
    'HorizontalAlignment', 'left',...
    'Position', [ 50, 25, 300, 200 ] );

% Shows first, second, third steps in order
mat_history00 = uicontrol(...
    'Style', 'edit',...
    'Enable', 'inactive',...
    'Max', 2,...
    'Position', [ 375, 75, 200, 150 ] );

mat_history01 = uicontrol(...
    'Style', 'edit',...
    'Enable', 'inactive',...
    'Max', 2,...
    'Position', [ 580, 75, 200, 150 ] );

mat_history02 = uicontrol(...
    'Style', 'edit',...
    'Enable', 'inactive',...
    'Max', 2,...
    'Position', [ 785, 75, 200, 150 ] );

step_history00 = uicontrol(...
    'Style', 'edit',...
    'Enable', 'inactive',...
    'Max', 2,...
    'Position', [ 375, 25, 200, 50] );

step_history01 = uicontrol(...
    'Style', 'edit',...
    'Enable', 'inactive',...
    'Max', 2,...
    'Position', [ 580, 25, 200, 50 ] );

step_history02 = uicontrol(...
    'Style', 'edit',...
    'Enable', 'inactive',...
    'Max', 2,...
    'Position', [ 785, 25, 200, 50 ] );

% Button controlling forward step
step_fwd = uicontrol(...
    'Style', 'pushbutton',...
    'Max', 2,...
    'String', 'Forward',...
    'Callback', @cb_step_fwd,...
    'Visible', 'off',...
    'Position', [ 885, 230, 75, 25 ] );

% Button controlling backward step
step_bwd = uicontrol(...
    'Style', 'pushbutton',...
    'Max', 2,...
    'String', 'Backward',...
    'Callback', @cb_step_bwd,...
    'Visible', 'off',...
    'Position', [ 800, 230, 75, 25 ] );

% Step titles, will change in accordance to current step
step00_txt = uicontrol(...
    'Style', 'text',...
    'String', strcat( 'Step:', num2str( INDEX_COUNT ) ),...
    'Position', [ 376, 10, 50, 15] );

step01_txt = uicontrol(...
    'Style', 'text',...
    'String', strcat( 'Step:', num2str( INDEX_COUNT + 1 ) ),...
    'Position', [ 581, 10, 50, 15] );

step02_txt = uicontrol(...
    'Style', 'text',...
    'String', strcat( 'Step:', num2str( INDEX_COUNT + 2 ) ),...
    'Position', [ 786, 10, 50, 15] );

% Dropdown menu and execution button
drop_menu = uicontrol(...
    'Style', 'popup',...
    'String', { 'Scalar Multiplication', 'None', 'Find Determinant' },... 
    'Position', [ 700, 300, 150, 25 ],...
    'Value', 1 );

menu_execute = uicontrol(...
    'Style', 'pushbutton',...
    'String', 'Execute Operation',...
    'Position', [ 700, 275, 150, 25 ],...
    'Callback', @cb_menu_execute ); 

% GUI Elements created during operation
scalar_entry = uicontrol(...
    'Style', 'edit',...
    'String', '1',...
    'Visible', 'off',...
    'Position', [ 865, 275, 40, 30 ] );

scalar_recalculate = uicontrol(...
    'Style', 'pushbutton',...
    'String', 'Recalculate',...
    'Position', [ 915, 275, 75, 30 ],...
    'Visible', 'off',...
    'Callback', @cb_scalar_recalculate );

movegui( f, 'center' )
set( f, 'visible', 'on' ) 

% Callback for row and column button
function cb_rxc_button( ~, ~ )
    set ( entry_table, 'Visible', 'off' ) 

    temp_rows = str2double( get( row_box, 'String' ) );
    temp_columns = str2double( get( col_box, 'String' ) );

    row_check = isnan( temp_rows );
    columns_check = isnan( temp_columns );

    if row_check == 0 && columns_check == 0
        ROWS = temp_rows;
        COLUMNS = temp_columns;
        data_in = zeros( ROWS, COLUMNS );

        col_edit_string = true( 1, COLUMNS );

        set( entry_table,...
            'ColumnEditable', col_edit_string,...
            'Data', data_in,...
            'Visible', 'on' ) 
    else 
        set( entry_table,...
            'Visible', 'on' ) 
    end

end

function cb_menu_execute( ~, ~ )
    % Turn off any gui elements created by an operation
    set( step_fwd, 'Visible', 'off' )
    set( step_bwd, 'Visible', 'off' )
    set( scalar_entry, 'Visible', 'off' )
    set( scalar_recalculate, 'Visible', 'off' )
    set( help_button, 'String', 'Help' )
    help_check = 1;

    switch get( drop_menu, 'Value' )
    case 1
        cb_op00(1)

        set( step_fwd, 'Visible', 'on' )
        set( step_bwd, 'Visible', 'on' )
        set( scalar_entry, 'Visible', 'on' )
        set( scalar_recalculate, 'Visible', 'on' ) 
    case 2
        cb_op01()
    case 3
        cb_op02()
    otherwise 
        null_statement = 'null';
    end
end 

function cb_scalar_recalculate ( ~, ~ )
    new_scalar = str2double( get( scalar_entry, 'String' ) );
    cb_op00( new_scalar );
end

function cb_help_button ( ~, ~ )
    
    if help_check == 1
        set( info_box, 'String', info_text_initial )
        set( help_button, 'String', 'Return' )
        help_check = 0;
    else 
        set( info_box, 'String', INFO_BOX_TEXT);
        set( help_button, 'String', 'Help' )
        help_check = 1;
    end
    
end
        

% Forward history step callback
function cb_step_fwd( ~, ~ )
    set( mat_history00, 'Visible', 'off' )
    set( mat_history01, 'Visible', 'off' )
    set( mat_history02, 'Visible', 'off' )


    if INDEX < ( length( RESHAPE_DISP ) - 4 * STEP ) && INDEX_COUNT ~= 0 
        INDEX = INDEX + STEP + 1;
        INDEX_COUNT = INDEX_COUNT + 1;
    elseif INDEX_COUNT == 0 && RED_CHECK_BWD == 0
    elseif INDEX_COUNT == 0 && RED_CHECK_BWD == 1 
        INDEX = INDEX + STEP + 1;
        INDEX_COUNT = 2; 
    else
        set( step_fwd,...
            'BackgroundColor', [ 1 0 0 ] )
        RED_CHECK_FWD = 1;
    end

    temp_mat00 = RESHAPE_DISP( INDEX:INDEX + STEP );
    temp_mat01 = RESHAPE_DISP( ( INDEX + STEP + 1 ):( INDEX + 1 + 2 * STEP ) );
    temp_mat02 = RESHAPE_DISP( ( INDEX + 2 + 2 * STEP ):( INDEX + 2 + 3 * STEP ) );

    disp_matrix00 = transpose( reshape( temp_mat00, COLUMNS, ROWS ) ); 
    disp_matrix01 = transpose( reshape( temp_mat01, COLUMNS, ROWS ) ); 
    disp_matrix02 = transpose( reshape( temp_mat02, COLUMNS, ROWS ) ); 

    set( mat_history00,...
        'String', num2str( disp_matrix00 ),...
        'Visible', 'on' )

    set( mat_history01,...
        'String', num2str( disp_matrix01 ),...
        'Visible', 'on' )

    set( mat_history02,...
        'String', num2str( disp_matrix02 ),...
        'Visible', 'on' )

    if INDEX_COUNT == 0 && RED_CHECK_FWD ~= 1
        set( step_history00,...
            'String', 'INPUT MATRIX',... 
            'Visible', 'on' )
        set( step_history01,...
            'String', DISP_STEP_ARRAY{ INDEX_COUNT + 1 },...
            'Visible', 'on' )
        set( step_history02,...
            'String', DISP_STEP_ARRAY{ INDEX_COUNT + 2 },...
            'Visible', 'on' )
    elseif RED_CHECK_FWD ~= 1
        set( step_history00,...
            'String', DISP_STEP_ARRAY{ INDEX_COUNT - 1 },...
            'Visible', 'on' )
        set( step_history01,...
            'String', DISP_STEP_ARRAY{ INDEX_COUNT },...
            'Visible', 'on' )
        set( step_history02,...
            'String', DISP_STEP_ARRAY{ INDEX_COUNT + 1 },...
            'Visible', 'on' )
    end

    if INDEX_COUNT == 0 
        set( step00_txt,...
            'Style', 'text',...
            'String', strcat( 'Step:', num2str( INDEX_COUNT ) ) );

        set( step01_txt,...
            'Style', 'text',...
            'String', strcat( 'Step:', num2str( INDEX_COUNT + 1 ) ) );

        set( step02_txt,...
            'Style', 'text',...
            'String', strcat( 'Step:', num2str( INDEX_COUNT + 2 ) ) );

    else 
        set( step00_txt,...
            'Style', 'text',...
            'String', strcat( 'Step:', num2str( INDEX_COUNT - 1 ) ) );

        set( step01_txt,...
            'Style', 'text',...
            'String', strcat( 'Step:', num2str( INDEX_COUNT ) ) );

        set( step02_txt,...
            'Style', 'text',...
            'String', strcat( 'Step:', num2str( INDEX_COUNT + 1 ) ) );
    end

    if INDEX_COUNT == 0
        INDEX_COUNT = 1;
    end

    if RED_CHECK_BWD == 1
        set( step_bwd,...
            'BackgroundColor', 'default' )
        RED_CHECK_BWD = 0;
    end

end

% Backward history button callback function
function cb_step_bwd( ~, ~ )
    set( mat_history00, 'Visible', 'off' )
    set( mat_history01, 'Visible', 'off' )
    set( mat_history02, 'Visible', 'off' )
    

    if INDEX > 1
        INDEX = INDEX - ( STEP + 1 );
        INDEX_COUNT = INDEX_COUNT - 1;
    else
        set( step_bwd,...
            'BackgroundColor', [ 1 0 0 ] )
        RED_CHECK_BWD = 1;
        INDEX_COUNT = 0;
    end

    if INDEX == 1
        INDEX_COUNT = 0;
    end

    temp_mat00 = RESHAPE_DISP( INDEX:INDEX + STEP );
    temp_mat01 = RESHAPE_DISP( ( INDEX + STEP + 1 ):( INDEX + 1 + 2 * STEP ) );
    temp_mat02 = RESHAPE_DISP( ( INDEX + 2 + 2 * STEP ):( INDEX + 2 + 3 * STEP ) );

    disp_matrix00 = transpose( reshape( temp_mat00, COLUMNS, ROWS ) ); 
    disp_matrix01 = transpose( reshape( temp_mat01, COLUMNS, ROWS ) ); 
    disp_matrix02 = transpose( reshape( temp_mat02, COLUMNS, ROWS ) ); 

    set( mat_history00,...
        'String', num2str( disp_matrix00 ),...
        'Visible', 'on' )

    set( mat_history01,...
        'String', num2str( disp_matrix01 ),...
        'Visible', 'on' )

    set( mat_history02,...
        'String', num2str( disp_matrix02 ),...
        'Visible', 'on' )

    if INDEX_COUNT == 0
        set( step_history00,...
            'String', 'INPUT MATRIX',... 
            'Visible', 'on' )
        set( step_history01,...
            'String', DISP_STEP_ARRAY{ INDEX_COUNT + 1 },...
            'Visible', 'on' )
        set( step_history02,...
            'String', DISP_STEP_ARRAY{ INDEX_COUNT + 2 },...
            'Visible', 'on' )
    else 
        set( step_history00,...
            'String', DISP_STEP_ARRAY{ INDEX_COUNT - 1 },...
            'Visible', 'on' )
        set( step_history01,...
            'String', DISP_STEP_ARRAY{ INDEX_COUNT },...
            'Visible', 'on' )
        set( step_history02,...
            'String', DISP_STEP_ARRAY{ INDEX_COUNT + 1 },...
            'Visible', 'on' )
    end

    if INDEX_COUNT == 0
        set( step00_txt,...
            'Style', 'text',...
            'String', strcat( 'Step:', num2str( INDEX_COUNT ) ) );

        set( step01_txt,...
            'Style', 'text',...
            'String', strcat( 'Step:', num2str( INDEX_COUNT + 1 ) ) );

        set( step02_txt,...
            'Style', 'text',...
            'String', strcat( 'Step:', num2str( INDEX_COUNT + 2 ) ) );

    else 
        set( step00_txt,...
            'Style', 'text',...
            'String', strcat( 'Step:', num2str( INDEX_COUNT - 1 ) ) );

        set( step01_txt,...
            'Style', 'text',...
            'String', strcat( 'Step:', num2str( INDEX_COUNT ) ) );

        set( step02_txt,...
            'Style', 'text',...
            'String', strcat( 'Step:', num2str( INDEX_COUNT + 1 ) ) );
    end
 
    if RED_CHECK_FWD == 1
        set( step_fwd,...
            'BackgroundColor', 'default' )
        RED_CHECK_FWD = 0;
    end

end

function cb_op00( new_scalar )
    set ( info_box, 'Visible', 'off' )
    set ( output_table, 'Visible', 'off' ) 
    set( mat_history00, 'Visible', 'off' )
    set( mat_history01, 'Visible', 'off' )
    set( mat_history02, 'Visible', 'off' )

    % Pull data from input matrix
    temp_mat = get( entry_table, 'Data' );

    % Set globals
    INDEX = 1;
    STEP = COLUMNS * ROWS - 1;
    DISP_MAT = temp_mat;
    INDEX_COUNT = 0;
    DISP_STEP_ARRAY = cell(0);

    % OPERATION START: Scalar Multiplication by 2 

    %{ 
    TO PROPERLY DISPLAY 
    - temp_mat is the name of your matrix as you make changes to it 
      temp_mat is initially drawn directly from the table that the user inputs
      values into...do your operations on temp_mat
    - DISP_MAT = vertcat( DISP_MAT, TEMP_MAT ) 
        - This code concatenates your starting matrix with each change 
          to your temp_mat...your code must update temp_mat with 1 value for 
          each step...representing 1 operation...for this example...temp_mat
          has 1 element multiplied by 2 and temp_mat is updated....DISP_MAT
          then concatenates the whole temp_mat to show how the matrix changed
    - DISP_STEP_ARRAY
        - This is tricky, it assumes you are performing your operation on each row
          column by column as it is written for scalar multiplication. However,
          if you look at the code for Find Determinant, there is no
          DISP_STEP_ARRAY...the history steps are simply set. If you decide
          to no allocate values to DISP_STE_ARRAY, remove the cb_step_fwd()
          function call later in this function. 
    
          In the end you must end up with a vertical array of the steps you took to get 
          the output matrix. They will be in order, corresponding to each
          operation on temp_mat
    
    - info_box 
        - At the end notice info_box, just fill in the information you would like to 
          include here. It is just a huge string. 
    - Finally you must create an entry in the drop_menu GUI element, and an
      entry in the cb_menu_execute function 
    %} 
    
    for i = 1:ROWS 
        for j = 1:COLUMNS
            temp_mat( i, j ) = temp_mat ( i, j ) * new_scalar;
            % Display matrix code here...records each step
            DISP_MAT = vertcat( DISP_MAT, temp_mat );
            % For the code to display properly you must define this 
            DISP_STEP_ARRAY{ i, j } = sprintf( 'Element ( %d, %d ) is multiplied by %d',...
                i, j, new_scalar );
        end
    end

    % OPERATION END

    % Data to be fed into history functions
    RESHAPE_DISP = reshape( DISP_MAT', 1, [] );
    DISP_STEP_ARRAY = reshape( transpose( DISP_STEP_ARRAY ), [] , 1 );
    
    % Data initial display on history steps
    cb_step_fwd()

    % Data displayed on output matrix 
    op_data = temp_mat;
    set( output_table,...
        'Data', op_data,...
        'Visible', 'on' ) 
        
    % Reset any error display 
    RED_CHECK_FWD = 0;
    RED_CHECK_BWD = 0;

    set( step_fwd,...
        'BackgroundColor', 'default' )
    set( step_bwd,...
        'BackgroundColor', 'default' )

    % Info Box Text
    INFO_BOX_TEXT = sprintf( [ 'Operation: Scalar Multiplication\n\n'...
        'Each element in the matrix is multiplied by a scalar value\n\n'...
        'You can assign a new scalar be multiplied to the right of the '...
        '<Execute Operation> button and click Recalculate to perform another '...
        'scalar multiplication\n',...
        '\n' ] );

    set( info_box,...
        'String', INFO_BOX_TEXT,...
        'Visible', 'on' )

end

function cb_op01( ~, ~ )

end

% OPERATION: Find Determinant 
function cb_op02( ~, ~ )
    set ( info_box, 'Visible', 'off' )
    set ( output_table, 'Visible', 'off' ) 

    % Pull data from input matrix
    temp_mat = get( entry_table, 'Data' );

    % Set globals
    INDEX = 1;
    STEP = COLUMNS * ROWS - 1;
    DISP_MAT = temp_mat;
    INDEX_COUNT = 0;

    % Data to be fed into history functions
    RESHAPE_DISP = reshape( DISP_MAT', 1, [] );
    [R C] = size(temp_mat);  % Rows and Columns
    [L U] = lu(temp_mat);   % LU Factorization, creats L and U matrices
    U_mat = U;  %The Upper matrix
    diU = diag(U)';  %vector of U diagonals
        
    if R == C
        set( mat_history00,... 
            'String', num2str( temp_mat ),...
            'Visible', 'on' )
      
        set( mat_history01, ... 
            'String', num2str( U_mat ),...
            'Visible', 'on' )
        
        set( mat_history02,... 
            'String', num2str( diU ),...
            'Visible', 'on' )

        set( step_history00,...
            'String', 'The Matrix is Square',...
            'Visible', 'on' )

        set( step_history01,...
            'String', 'Upper Triangular Matrix',...
            'Visible', 'on' )

        set( step_history02,...
            'String', 'LU Factorization: Vector of Diagonal of Upper Triangular Matrix',...
            'Visible', 'on' ) 

        % Data displayed on output matrix 
        set( output_table,...
            'Data', det(temp_mat),...
            'Visible', 'on' ) 

        % Reset any error display 
        RED_CHECK_FWD = 0;
        RED_CHECK_BWD = 0;

        set( step_fwd,...
            'BackgroundColor', 'default' )
        set( step_bwd,...
            'BackgroundColor', 'default' )

    else
        set( step_history00,...
            'String', 'The Matrix is not square, no further action will be taken',...
            'Visible', 'on' )

        set( mat_history00,... 
            'Visible', 'off' )
            
        set( mat_history01,... 
            'Visible', 'off' )

        set( mat_history02,...
            'Visible', 'off' )
        
    end

    % Info Box Text
    INFO_BOX_TEXT = sprintf( [ 'Operation: Find the Determinant\n\n'...
        'Step 0: First we must determine whether or not the matrix is square.'...
        'This means we must determine whether the number of rows equals the number of columns\n\n'...
        'Step 1: Lower-Upper(LU) Factorization: LU Factorization is the process of '...
        'factoring a matrix as the product of a lower and upper triangular matrix.'...
        'This can be done using a modified Guass-Jordan elimination.\n\n'...
        'Step 2: The matrix determinant can be calculated by multiplying the diagonals '...
        'of the upper matrix. Displayed in step 2 are the diagonal values of the upper matrix.\n'...
        '\n' ] );

    set( info_box,...
        'String', INFO_BOX_TEXT,...
        'Visible', 'on' )
   
end

end
